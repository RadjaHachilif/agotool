[uwsgi]
master = true ; false makes sense for debugging with e.g. Valgrind
strict = true ; Fail if unknown config parameter found
enable-threads = false ; Python threads not allowed (don't need them)
vacuum = true ; delete sockets during shutdown. Cleanup after yourself
single-interpreter = true ; single python interpreter per worker instance
die-on-term = true ; Shutdown when receiving SIGTERM
need-app = true ; Fail to start if application cannot load
lazy-apps = true ; loads your application one time per worker. thereby forking is disabled.

; aGOtool settings
wsgi-file = runserver.py
callable = app
http = 0.0.0.0:5911; incoming connections (Aquarius needs 5911)
;socket = :5911 ; incoming connections
stats = 127.0.0.1:9191 ; monitor
; Aquarius /etc/nginx/sites-enabled/agotool.org.conf
auto-procname = true ; give processes names (master and worker)
; prepend a useful name to the processes (can be seen in htop, but top doesn't show it)
procname-prefix = agotool_flask_

; https://uwsgi-docs.readthedocs.io/en/latest/MasterFIFO.html
master-fifo = agotool_master_chain_reloading.fifo
; echo c > master.fifo ; chain-reload

; Logging
;disable-logging = true ; uWSGI logging is too verbose
;log-4xx = true ; but we want to see critical errors
;log-5xx = true ; but we want to see critical errors
; on if not debug
;req-logger = file:log_uwsgi_requests.txt
; on if not debug
;logger = file:log_uwsgi_error.txt
; on if not debug
safe-pidfile = uwsgi_agotool_master_PID.txt

; Buffer size
buffer-size = 32768

; When to restart workers
max-requests = 80000 ; Restart workers after this many requests (STRING_v11: 80000)
; max-requests-delta = 5000 ; add (worker_id * delta) to the max_requests value of each worker --> for whatever reason setting not recognized
max-worker-lifetime = 604800 ; Restart workers after this many seconds (604800 --> 24*7*60*60, once per week).

; Dynamic worker scaling
cheaper-algo = busyness
processes = 6 ; Maximum number of workers allowed
cheaper = 2 ; Minimum number of workers allowed
cheaper-initial = 2 ; Workers created at startup
cheaper-overload = 60 ; Length of a cycle in seconds
cheaper-step = 2 ; How many workers to spawn at a time
cheaper-busyness-multiplier = 60 ; How many cycles to wait before killing workers
cheaper-busyness-min = 20 ; Below this threshold, kill workers (if stable for multiplier cycles).
cheaper-busyness-max = 70 ; Above this threshold, spawn new workers
cheaper-busyness-backlog-alert = 16 ; Spawn emergency workers if more than this many requests are waiting in the queue
cheaper-busyness-backlog-step = 2 ; How many emergegency workers to create if there are too many requests in the queue
harakiri = 600 ; Number of seconds after which "stuck worker" will get destroyed


### resources for Zerg config:
; http://zarnovican.github.io/2016/02/15/uwsgi-graceful-reload/#zerg-dance_1
; https://daniellombrana.es/blog/2015/07/01/the-art-of-graceful-reloading?utm_content=buffercecfc&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer
; https://gist.github.com/Shellbye/882a262f706f42c326dddc8441bbc55d
; https://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html#configure-nginx-for-your-site
[uwsgi]
master = true
zergpool = zerg.sock:app.sock
safe-pidfile = pid_zergpool.pid
daemonize = log_zerg.log
master-fifo = zerg.fifo
auto-procname = true ; give processes names (master and worker)
procname-prefix = agotool_zerg_

; stats = stats_uwsgi.sock
; vacuum = false


; Basically, an external process (the zerg server/pool) binds to the various sockets required by your app.
; Your uWSGI instance, instead of binding by itself, asks the zerg server/pool to pass it the file descriptor.
; This means multiple unrelated instances can ask for the same file descriptors and work together.

;; Finally, if you want to bring back a sleeping instance, just do:
;; # destroy the running instance
;; echo Q > running.fifo
;; # unpause the sleeping instance and set it as the running one
;; echo p1 > sleeping.fifo
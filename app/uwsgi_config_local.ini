[uwsgi]
master = true ; false makes sense for debugging with e.g. Valgrind
strict = true ; Fail if unknown config parameter found
enable-threads = false ; Python threads not allowed (don't need them)
vacuum = true ; delete sockets during shutdown. Cleanup after yourself
single-interpreter = true ; single python interpreter per worker instance
die-on-term = true ; Shutdown when receiving SIGTERM
need-app = true ; Fail to start if application cannot load
lazy-apps = true ; loads your application one time per worker. thereby forking is disabled.

; aGOtool settings
wsgi-file = runserver.py
callable = app

; https://uwsgi-docs.readthedocs.io/en/latest/MasterFIFO.html
master-fifo = master.fifo
; echo c > master.fifo ; chain-reload

http = 0.0.0.0:10112 ; incoming connections 10112 on San and Pisces
stats = 127.0.0.1:9192 ; monitor
auto-procname = true ; give processes names (master and worker)
; prepend a useful name to the processes (can be seen in htop, but top doesn't show it)
procname-prefix = agotool_PMID_flask_

; Logging
;disable-logging = true ; uWSGI logging is too verbose
;log-4xx = true ; but we want to see critical errors
;log-5xx = true ; but we want to see critical errors
;req-logger = file:log_uwsgi_requests.txt
;logger = file:log_uwsgi_error.txt
safe-pidfile = uwsgi_aGOtool_master_PID.txt

; Buffer size
buffer-size=32768

; When to restart workers
max-requests = 80000 ; Restart workers after this many requests
; max-requests-delta = 5000 ; add (worker_id * delta) to the max_requests value of each worker --> for whatever reason setting not recognized
max-worker-lifetime = 604800 ; Restart workers after this many seconds (6048ยก00 --> 24*7*60*60, once per week).
;
;; Dynamic worker scaling
;cheaper-algo = busyness
;processes = 4 ; Maximum number of workers allowed
;cheaper = 2 ; Minimum number of workers allowed
;cheaper-initial = 2 ; Workers created at startup
;cheaper-overload = 60 ; Length of a cycle in seconds
;cheaper-step = 2 ; How many workers to spawn at a time
;cheaper-busyness-multiplier = 60 ; How many cycles to wait before killing workers
;cheaper-busyness-min = 20 ; Below this threshold, kill workers (if stable for multiplier cycles).
;cheaper-busyness-max = 70 ; Above this threshold, spawn new workers
;cheaper-busyness-backlog-alert = 16 ; Spawn emergency workers if more than this many requests are waiting in the queue. on Linux only
;cheaper-busyness-backlog-step = 2 ; How many emergegency workers to create if there are too many requests in the queue. on Linux only
;harakiri = 600 ; Number of seconds after which "stuck worker" will get destroyed
;

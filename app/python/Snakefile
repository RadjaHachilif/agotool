import os, sys
# sys.path.insert(0, os.path.join(os.getcwd(), "python"))
# import variables_snakemake as variables
import variables
import create_SQL_tables_snakemake as cst
import download_resources_snakemake as drs
import tools
from importlib import reload
reload(cst)
reload(drs)
reload(tools)

import socket
hostname = socket.gethostname()

DOWNLOADS_DIR = variables.DOWNLOADS_DIR_SNAKEMAKE
TABLES_DIR = variables.TABLES_DIR_SNAKEMAKE
PYTHON_DIR = variables.PYTHON_DIR
NUMBER_OF_PROCESSES = variables.NUMBER_OF_PROCESSES
if NUMBER_OF_PROCESSES > 10:
    NUMBER_OF_PROCESSES_sorting = 10
else:
    NUMBER_OF_PROCESSES_sorting = NUMBER_OF_PROCESSES
verbose = variables.VERBOSE
TABLES_DICT_SNAKEMAKE = variables.TABLES_DICT_SNAKEMAKE

### Parameters
max_len_description = 250
min_count = 1 # Function_2_Proteins_table: minimum number of Proteins per TaxID for a each functional_association


### weekly downloads
URL_protein_2_function_PMID = r"http://download.jensenlab.org/aGOtool/documents_protein2function.tsv.gz"
Protein_2_Function_table_PMID = os.path.join(DOWNLOADS_DIR, "Protein_2_Function_table_PMID.txt")
URL_Function_2_Description_PMID = r"http://download.jensenlab.org/aGOtool/documents_function2description.tsv.gz"
Functions_table_PMID = os.path.join(DOWNLOADS_DIR, "Functions_table_PMID_all.txt.gz")
Functions_table_PMID_all = os.path.join(DOWNLOADS_DIR, "Functions_table_PMID_all.txt.gz")

### static files from STRING v11
Entity_types_table_STRING = os.path.join(TABLES_DIR, "Entity_types_table_STRING.txt")
Lineage_table_STRING = os.path.join(TABLES_DIR, "Lineage_table_STRING.txt")
Functions_table_STRING_all_but_PMID = os.path.join(TABLES_DIR, "Functions_table_STRING_all_but_PMID.txt")
Protein_2_Function_table_STRING_all_but_PMID = os.path.join(TABLES_DIR, "Protein_2_Function_table_STRING_all_but_PMID.txt")
Taxid_2_Proteins_table_STRING = os.path.join(TABLES_DIR, "Taxid_2_Proteins_table_STRING.txt")

### files to be created STRING final
# Functions_table_STRING_reduced below
Protein_2_FunctionEnum_table_STRING = os.path.join(TABLES_DIR, "Protein_2_FunctionEnum_table_STRING.txt")
Taxid_2_FunctionCountArray_table_STRING = os.path.join(TABLES_DIR, "Taxid_2_FunctionCountArray_table_STRING.txt")

### intermediate temp files
Protein_2_Function_table_STRING = os.path.join(TABLES_DIR, "Protein_2_Function_table_STRING.txt")
Function_2_ENSP_table_STRING_reduced = os.path.join(TABLES_DIR, "Function_2_ENSP_table_STRING_reduced.txt")
Functions_table_STRING_all = os.path.join(TABLES_DIR, "Functions_table_STRING_all.txt")
Functions_table_STRING_removed = os.path.join(TABLES_DIR, "Functions_table_STRING_removed.txt")
Functions_table_STRING = os.path.join(TABLES_DIR, "Functions_table_STRING.txt") # reduced final table
# Protein_2_Function_table_STRING_reduced



rule download_Protein_2_Function_PMID:
    output:
        Protein_2_Function_table_PMID_STS_gz = Protein_2_Function_table_PMID + ".gz",
        Protein_2_Function_table_PMID = Protein_2_Function_table_PMID
    params:
        URL_protein_2_function_PMID = URL_protein_2_function_PMID,
        verbose = verbose
    run:
        drs.download_requests(params.URL_protein_2_function_PMID, output.Protein_2_Function_table_PMID_STS_gz, params.verbose)
        tools.gunzip_file(output.Protein_2_Function_table_PMID_STS_gz, output.Protein_2_Function_table_PMID)

rule download_Functions_2_Descriptions_PMID:
    output:
        Functions_table_PMID_all = Functions_table_PMID_all
    params:
        URL_Function_2_Description_PMID = URL_Function_2_Description_PMID,
        verbose = verbose
    run:
        drs.download_requests(params.URL_Function_2_Description_PMID, output.Functions_table_PMID_all, params.verbose)

rule r_Functions_table_PMID_cleanup:
    input:
        Functions_table_PMID_all = Functions_table_PMID_all,
        max_len_description = max_len_description
    output:
        Functions_table_PMID = Functions_table_PMID
    run:
        cst.Functions_table_PMID_cleanup(input.Functions_table_PMID_all, input.max_len_description, output.Functions_table_PMID)

rule r_Functions_table_STRING_all:
    input:
        fn_list_str = [Functions_table_STRING_all_but_PMID,
                       Functions_table_PMID]
    output:
        Functions_table_STRING_all = Functions_table_STRING_all
    threads: NUMBER_OF_PROCESSES_sorting
    run:
        cst.concatenate_Functions_tables(input.fn_list_str, output.Functions_table_STRING_all, threads)

rule r_Protein_2_Function_table_STRING:
    input:
        Taxid_2_Proteins_table_STRING = Taxid_2_Proteins_table_STRING,
        fn_list_str = [Protein_2_Function_table_STRING_all_but_PMID,
                       Protein_2_Function_table_PMID]
    output:
        Protein_2_Function_table_STRING = Protein_2_Function_table_STRING
    threads: NUMBER_OF_PROCESSES_sorting
    run:
        cst.Protein_2_Function_table_STRING(input.fn_list_str, input.Taxid_2_Proteins_table_STRING, output.Protein_2_Function_table_STRING, threads)


rule r_Function_2_ENSP_table:
    input:
        Protein_2_Function_table_STRING = Protein_2_Function_table_STRING, # Protein_2_Function_table_STRING_all_but_PMID
        Taxid_2_Proteins_table_STRING = Taxid_2_Proteins_table_STRING,
        Functions_table_STRING_all = Functions_table_STRING_all,
    output:
        Function_2_ENSP_table_STRING = Function_2_ENSP_table_STRING,
        Function_2_ENSP_table_STRING_reduced = Function_2_ENSP_table_STRING_reduced,
        Function_2_ENSP_table_STRING_removed = Function_2_ENSP_table_STRING_removed
    params:
        min_count = min_count,
        verbose = verbose
    run:
        cst.Function_2_ENSP_table(input.Protein_2_Function_table_STRING, input.Taxid_2_Proteins_table_STRING, input.Functions_table_STRING_all, output.Function_2_ENSP_table_STRING, output.Function_2_ENSP_table_STRING_reduced, output.Function_2_ENSP_table_STRING_removed, min_count=params.min_count, verbose=params.verbose)


rule r_Functions_table_STRING: # reduce to relevant part
    input:
        Functions_table_STRING_all = Functions_table_STRING_all,
        Function_2_ENSP_table_STRING_reduced = Function_2_ENSP_table_STRING_reduced
    output:
        Functions_table_STRING_removed = Functions_table_STRING_removed,
        Functions_table_STRING = Functions_table_STRING
    run:
        cst.Functions_table_STRING_reduced(input.Functions_table_STRING_all, input.Function_2_ENSP_table_STRING_reduced, output.Functions_table_STRING_removed, output.Functions_table_STRING)




rule r_Protein_2_Function_table_reduced:
    input:
        Protein_2_Function_table_STRING = Protein_2_Function_table_STRING,
        Function_2_ENSP_table_STRING_removed = Function_2_ENSP_table_STRING_removed,
        Functions_table_STRING = Functions_table_STRING
    output:
        Protein_2_Function_table_STRING_reduced = Protein_2_Function_table_STRING_reduced,
        Protein_2_Function_table_STRING_removed = Protein_2_Function_table_STRING_removed
    run:
        cst.reduce_Protein_2_Function_table(input.Protein_2_Function_table_STRING, input.Function_2_ENSP_table_STRING_removed, input.Functions_table_STRING, output.Protein_2_Function_table_STRING_reduced, output.Protein_2_Function_table_STRING_removed)

rule r_Protein_2_FunctionEnum_table_STRING:
    input:
        Protein_2_Function_table_STRING_reduced = Protein_2_Function_table_STRING_reduced,
        Functions_table_STRING = Functions_table_STRING
    output:
        Protein_2_FunctionEnum_table_STRING = Protein_2_FunctionEnum_table_STRING
    threads: NUMBER_OF_PROCESSES_sorting
    run:
        cst.Protein_2_FunctionEnum_table_STRING(input.Functions_table_STRING, input.Protein_2_Function_table_STRING_reduced, output.Protein_2_FunctionEnum_table_STRING, threads)
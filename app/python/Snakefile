import os, sys
# sys.path.insert(0, os.path.join(os.getcwd(), "python"))
import variables_snakemake as variables
import create_SQL_tables_snakemake as cst
import download_resources_snakemake as drs
from importlib import reload
reload(cst)
reload(drs)

DOWNLOADS_DIR = variables.DOWNLOADS_DIR
TABLES_DIR = variables.TABLES_DIR
PYTHON_DIR = variables.PYTHON_DIR
NUMBER_OF_PROCESSES = variables.NUMBER_OF_PROCESSES
if NUMBER_OF_PROCESSES > 10:
    NUMBER_OF_PROCESSES_sorting = 10
else:
    NUMBER_OF_PROCESSES_sorting = NUMBER_OF_PROCESSES
verbose = variables.VERBOSE
### files that need to be created for DB
# - Functions_table_STRING_reduced.txt
# - Protein_2_FunctionEnum_table_STRING.txt
# - Entity_types_table_STRING.txt
# - Taxid_2_Proteins_table_STRING.txt
# - Taxid_2_FunctionCountArray_table_STRING.txt
# - Lineage_table_STRING.txt

### logic
# assemble all annotations into Protein_2_Function_table_STRING.txt limit to minimum number of > 1 function per protein
# --> Function_2_ENSP_table_STRING.txt
#      includes reduction step
#       - limit to relevant ENSPs
#       - limit to functions with proper descriptions and information in Functions_table_STRING.txt
#       - remove if only a single function per genome of given TaxID
# limit Functions_table_STRING.txt to relevant functions appearing in Function_2_ENSP_table_STRING_reduced.txt
# Function_2_ENSP_table_STRING_reduced.txt again serves as the basis to reduce
#   - Protein_2_Function_table_STRING.txt
#   - Protein_2_FuncEnum_table_STRING.txt
#   - Taxid_2_FunctionCountArray_table_STRING.txt
# reduce Functions_table_STRING.txt by removing varibles.blacklisted_terms --> therefore removing them from final Protein_2_Function/Enum table


# FAQ
# Why are annotations removed in Protein_2_Function_table_STRING_removed.txt ?
#  - check function in Function_2_ENSP_table_STRING.txt --> exists only once per genome
#  - check ENSP in shorthands --> maybe not in relevant ENSPs
# Why are functions removed from Functions_table_STRING_reduced.txt ?
#  - check if present at all in Protein_2_Function_table_STRING.txt

### Parameters
max_len_description = 250
min_count = 1 # Function_2_ENSP_table: minimum number of ENSPs per TaxID for a each functional_association

### URLs
URL_GO_basic_obo = r"http://purl.obolibrary.org/obo/go/go-basic.obo"
# URL_GO_slim_obo = r"http://purl.obolibrary.org/obo/go/subsets/goslim_generic.obo"
URL_UPK_obo = r"http://www.uniprot.org/keywords/?query=&format=obo"
URL_SwissProt_dump = r"ftp://ftp.expasy.org/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.dat.gz" # Swiss mirror
URL_TrEMBL_dump = r"ftp://ftp.expasy.org/databases/uniprot/current_release/knowledgebase/complete/uniprot_trembl.dat.gz"

### Downloads
GO_basic_obo = os.path.join(DOWNLOADS_DIR, "go-basic.obo")
# GO_slim_obo = os.path.join(DOWNLOADS_DIR, "goslim_generic.obo")
UPK_obo = os.path.join(DOWNLOADS_DIR, "keywords-all.obo")
SwissProt_dump = os.path.join(DOWNLOADS_DIR, "uniprot_sprot.dat.gz")
TrEMBL_dump = os.path.join(DOWNLOADS_DIR, "uniprot_trembl.dat.gz")

RCTM_hierarchy = os.path.join(DOWNLOADS_DIR, "RCTM_hierarchy.tsv") # https://reactome.org/download/current/ReactomePathwaysRelation.txt
RCTM_associations = os.path.join(DOWNLOADS_DIR, "RCTM_associations.tsv") # #!!! missing ask Damian he probably did some kind of mapping
RCTM_descriptions = os.path.join(DOWNLOADS_DIR, "RCTM_descriptions.tsv") # https://reactome.org/download/current/ReactomePathways.txt
# --> there is an "R-" as prefix everywhere which Damian probably took out


string_matches = r"/mnt/mnemo5/dblyon/agotool/data/PostgreSQL/downloads/string_matches.tsv" # string_matches = os.path.join(DOWNLOADS_DIR, "string_matches.tsv.gz") # Lars
pmc_medline = r"/mnt/mnemo5/dblyon/agotool/data/PostgreSQL/downloads/pmc_medline.tsv" # pmc_medline_small_example.tsv" # ask LARS
GO_knowledge_Lars = os.path.join(DOWNLOADS_DIR, "knowledge.tsv.gz") # version10="string_go.tsv.gz" new_version="knowledge.tsv.gz" # Lars
all_entities = os.path.join(DOWNLOADS_DIR, "all_entities.tsv.gz") # Lars mapping

### STRING release intervals
Protein_shorthands = os.path.join(DOWNLOADS_DIR, "protein.shorthands.v11.txt") # once per release

URL_interpro_parent_2_child_tree = r"ftp://ftp.ebi.ac.uk/pub/databases/interpro/ParentChildTreeFile.txt"
interpro_parent_2_child_tree = os.path.join(DOWNLOADS_DIR, "interpro_parent_2_child_tree.txt")
string_2_interpro = os.path.join(DOWNLOADS_DIR, "string_2_interpro.dat.gz") # Davide
uniprot_2_interpro = os.path.join(DOWNLOADS_DIR, "protein_2_ipr.dat.gz")
URL_interpro_AN_2_name = r"ftp://ftp.ebi.ac.uk/pub/databases/interpro/entry.list"
interpro_AN_2_name = os.path.join(DOWNLOADS_DIR, "interpro_AN_2_name.txt") # InterPro_name_2_AN


uniprot_2_string = os.path.join(DOWNLOADS_DIR, "full_uniprot_2_string.jan_2018.clean.tsv") # Damain script --> run on cluster


protein_domain_annotations = os.path.join(DOWNLOADS_DIR, "string11_dom_prot_full_v3.sql") # Ivica --> static
SMART_domain_descriptions = os.path.join(DOWNLOADS_DIR, "SMART_domain_descriptions.txt")
PFAM_clans = os.path.join(DOWNLOADS_DIR, "Pfam-A.clans.tsv")

### STRING update interval
KEGG_pathway = os.path.join(DOWNLOADS_DIR, "pathway.list") # Damian script --> running on cluster
KEGG_benchmarking = os.path.join(DOWNLOADS_DIR, "kegg_benchmarking.CONN_maps_in.v11.nothing_blacklisted.tsv")


# ToDo compare GO annotations from Lars to UniProt-retrieved

### Tables
Function_2_ENSP_table_STRING = os.path.join(TABLES_DIR, "Function_2_ENSP_table_STRING.txt")
Function_2_ENSP_table_STRING_reduced = os.path.join(TABLES_DIR, "Function_2_ENSP_table_STRING_reduced.txt")
Function_2_ENSP_table_STRING_removed = os.path.join(TABLES_DIR, "Function_2_ENSP_table_STRING_removed.txt")
Functions_table_GO = os.path.join(TABLES_DIR, "Functions_table_GO.txt")
Functions_table_InterPro = os.path.join(TABLES_DIR, "Functions_table_InterPro.txt")
Functions_table_KEGG = os.path.join(TABLES_DIR, "Functions_table_KEGG.txt")
Functions_table_PFAM = os.path.join(TABLES_DIR, "Functions_table_PFAM.txt")
Functions_table_PFAM_no_mapping = os.path.join(TABLES_DIR, "Functions_table_PFAM_no_mapping.txt")
Functions_table_PMID = os.path.join(TABLES_DIR, "Functions_table_PMID.txt")
Functions_table_PMID_temp = os.path.join(TABLES_DIR, "Functions_table_PMID_temp.txt")
Functions_table_RCTM = os.path.join(TABLES_DIR, "Functions_table_RCTM.txt")
Functions_table_SMART = os.path.join(TABLES_DIR, "Functions_table_SMART.txt")
Functions_table_SMART_no_mapping = os.path.join(TABLES_DIR, "Functions_table_SMART_no_mapping.txt")
Functions_table_STRING_all = os.path.join(TABLES_DIR, "Functions_table_STRING_all.txt")
Functions_table_STRING_reduced = os.path.join(TABLES_DIR, "Functions_table_STRING.txt") # reduced but not as suffix
Functions_table_STRING_removed = os.path.join(TABLES_DIR, "Functions_table_STRING_removed.txt")
Functions_table_UPK = os.path.join(TABLES_DIR, "Functions_table_UPK.txt")
Lineage_table = os.path.join(TABLES_DIR, "Lineage_table_STRING.txt")
Lineage_table_no_translation = os.path.join(TABLES_DIR, "Lineage_table_no_translation.txt")
Protein_2_FunctionEnum_table_STRING = os.path.join(TABLES_DIR, "Protein_2_FunctionEnum_table_STRING.txt")
Protein_2_Function_table_GO = os.path.join(TABLES_DIR, "Protein_2_Function_table_GO.txt")
Protein_2_Function_table_InterPro = os.path.join(TABLES_DIR, "Protein_2_Function_table_InterPro.txt")
Protein_2_Function_table_KEGG = os.path.join(TABLES_DIR, "Protein_2_Function_table_KEGG.txt")
KEGG_Taxid_2_acronym_table = os.path.join(TABLES_DIR, "KEGG_Taxid_2_acronym_table.txt")
Protein_2_Function_table_PFAM = os.path.join(TABLES_DIR, "Protein_2_Function_table_PFAM.txt")
Protein_2_Function_table_PMID = os.path.join(TABLES_DIR, "Protein_2_Function_table_PMID.txt")
Protein_2_Function_table_RCTM = os.path.join(TABLES_DIR, "Protein_2_Function_table_RCTM.txt")
Protein_2_Function_table_SMART = os.path.join(TABLES_DIR, "Protein_2_Function_table_SMART.txt")
Protein_2_Function_table_STRING = os.path.join(TABLES_DIR, "Protein_2_Function_table_STRING.txt")
Protein_2_Function_table_STRING_reduced = os.path.join(TABLES_DIR, "Protein_2_Function_table_STRING_reduced.txt")
Protein_2_Function_table_STRING_removed = os.path.join(TABLES_DIR, "Protein_2_Function_table_STRING_removed.txt")
Protein_2_Function_table_UPK = os.path.join(TABLES_DIR, "Protein_2_Function_table_UPK.txt")
Taxid_2_Proteins_table_STRING = os.path.join(TABLES_DIR, "Taxid_2_Proteins_table_STRING.txt")
Taxid_2_FunctionCountArray_table_STRING = os.path.join(TABLES_DIR, "Taxid_2_FunctionCountArray_table_STRING.txt")
map_name_2_an_PFAM = os.path.join(TABLES_DIR, "map_name_2_an_PFAM.txt")
map_name_2_an_SMART = os.path.join(TABLES_DIR, "map_name_2_an_SMART.txt")
AFC_KS_DIR = directory(os.path.join(TABLES_DIR, "afc_ks/"))
### temp files
Protein_2_Function_table_SMART_temp = os.path.join(TABLES_DIR, "Protein_2_Function_table_SMART_temp.txt")
Protein_2_Function_table_PFAM_temp = os.path.join(TABLES_DIR, "Protein_2_Function_table_PFAM_temp.txt")
Functions_tables_STRING_temp = temp(os.path.join(TABLES_DIR, "Functions_tables_STRING_temp.txt"))
temp_dir = directory(os.path.join(TABLES_DIR, "temp"))
### scripts
parallel_parse_textmining_pmc_medline = os.path.join(PYTHON_DIR, "parallel_parse_textmining_pmc_medline.py")


### download resources
rule download_GO_basic_obo:
    output:
        GO_basic_obo = GO_basic_obo
    params:
        verbose = verbose,
        URL_GO_basic_obo = URL_GO_basic_obo
    # shell:
    #     """python -c 'import download_resources_snakemake; download_resources_snakemake.download_requests(url=r"{params.URL_GO_basic_obo}", file_name=r"{output.GO_basic_obo}", verbose={params.verbose})'"""
    run:
        drs.download_requests(params.URL_GO_basic_obo, output.GO_basic_obo, params.verbose)

rule download_UPK_obo:
    output:
        UPK_obo = UPK_obo
    params:
        verbose = verbose,
        URL_UPK_obo = URL_UPK_obo
    # shell:
    #     """python -c 'import download_resources_snakemake; download_resources_snakemake.download_requests(url=r"{params.URL_UPK_obo}", file_name=r"{output.UPK_obo}", verbose={params.verbose})'"""
    run:
        drs.download_requests(params.URL_UPK_obo, output.UPK_obo, params.verbose)

rule download_SwissProt_dump:
    output:
        SwissProt_dump = SwissProt_dump
    params:
        verbose = verbose,
        URL_SwissProt_dump = URL_SwissProt_dump
    # shell:
    #     """python -c 'import download_resources_snakemake; download_resources_snakemake.download_gzip_file(url=r"{params.URL_SwissProt_dump}", file_name=r"{output.SwissProt_dump}", verbose={params.verbose})'"""
    run:
        drs.download_gzip_file(params.URL_SwissProt_dump, output.SwissProt_dump, params.verbose)

rule download_TrEMBL_dump:
    output:
        TrEMBL_dump = TrEMBL_dump
    params:
        verbose = verbose,
        URL_TrEMBL_dump = URL_TrEMBL_dump
    # shell:
    #     """python -c 'import download_resources_snakemake; download_resources_snakemake.download_gzip_file(url=r"{params.URL_TrEMBL_dump}", file_name=r"{output.TrEMBL_dump}", verbose={params.verbose})'"""
    run:
        drs.download_gzip_file(params.URL_TrEMBL_dump, output.TrEMBL_dump, params.verbose)

rule download_interpro_AN_2_name:
    output:
        interpro_AN_2_name = interpro_AN_2_name
    params:
        URL_interpro_AN_2_name = URL_interpro_AN_2_name,
        verbose = verbose
    run:
        drs.download_gzip_file(params.URL_interpro_AN_2_name, output.interpro_AN_2_name, verbose=params.verbose)

rule download_interpro_parent_2_child_tree:
    output:
        interpro_parent_2_child_tree = interpro_parent_2_child_tree
    params:
        URL_interpro_parent_2_child_tree = URL_interpro_parent_2_child_tree,
        verbose = verbose
    run:
        drs.download_gzip_file(params.URL_interpro_parent_2_child_tree, output.interpro_parent_2_child_tree, verbose=params.verbose)


### create SQL tables
rule string_2_interpro:
    input: # relative path to working dir
        uniprot_2_string = uniprot_2_string,
        uniprot_2_interpro = uniprot_2_interpro
    output: # relative path to working dir
        string_2_interpro = string_2_interpro
    #script: # relative path to Snakefile
    #    "python/map_string_2_interpro.py"
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.map_string_2_interpro(r"{input.uniprot_2_string}", r"{input.uniprot_2_interpro}", r"{output.string_2_interpro}")'"""
    run:
        cst.string_2_interpro(input.uniprot_2_string, input.uniprot_2_interpro, output.string_2_interpro)

rule Protein_2_Function_table_InterPro:
    input:
        string_2_interpro = string_2_interpro,
        Functions_table_InterPro = Functions_table_InterPro,
        interpro_parent_2_child_tree = interpro_parent_2_child_tree
    output:
        Protein_2_Function_table_InterPro = Protein_2_Function_table_InterPro,
    params:
        verbose = verbose
    threads: NUMBER_OF_PROCESSES_sorting
    run:
        cst.Protein_2_Function_table_InterPro(input.string_2_interpro, input.Functions_table_InterPro, input.interpro_parent_2_child_tree, output.Protein_2_Function_table_InterPro, number_of_processes=threads, verbose=params.verbose)

rule Functions_table_InterPro:
    input:
        interpro_AN_2_name = interpro_AN_2_name,
        interpro_parent_2_child_tree = interpro_parent_2_child_tree
    output:
        Functions_table_InterPro = Functions_table_InterPro
    run:
        cst.Functions_table_InterPro(input.interpro_AN_2_name, input.interpro_parent_2_child_tree, output.Functions_table_InterPro)

rule Functions_table_KEGG:
    input:
        KEGG_pathway = KEGG_pathway
    output:
        Functions_table_KEGG = Functions_table_KEGG
    params:
        verbose = verbose
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.create_Functions_table_KEGG(r"{input.KEGG_pathway}", r"{output.Functions_table_KEGG}", {params.verbose})'"""
    run:
        cst.Functions_table_KEGG(input.KEGG_pathway, output.Functions_table_KEGG, params.verbose)

rule Functions_table_SMART:
    input:
        SMART_domain_descriptions = SMART_domain_descriptions
    output:
        Functions_table_SMART = Functions_table_SMART,
        map_name_2_an_SMART = map_name_2_an_SMART
    params:
        max_len_description = max_len_description
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.Functions_table_SMART(r"{input.SMART_domain_descriptions}", r"{output.Functions_table_SMART}", {params.max_len_description}, r"{output.map_name_2_an_SMART}")'"""
    run:
        cst.Functions_table_SMART(input.SMART_domain_descriptions, output.Functions_table_SMART, params.max_len_description, output.map_name_2_an_SMART)

rule Functions_table_PFAM:
    input:
        PFAM_clans = PFAM_clans
    output:
        Functions_table_PFAM = Functions_table_PFAM,
        map_name_2_an_PFAM = map_name_2_an_PFAM
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.Functions_table_PFAM(r"{input.PFAM_clans}", r"{output.Functions_table_PFAM}", r"{output.map_name_2_an_PFAM}")'"""
    run:
        cst.Functions_table_PFAM(input.PFAM_clans, output.Functions_table_PFAM, output.map_name_2_an_PFAM)

rule Functions_table_GO:
    input:
        GO_basic_obo = GO_basic_obo
    output:
        Functions_table_GO = Functions_table_GO
    params:
        is_upk = False
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.Functions_table_GO_or_UPK(r"{input.GO_basic_obo}", r"{output.Functions_table_GO}", {params.is_upk})'"""
    run:
        cst.Functions_table_GO_or_UPK(input.GO_basic_obo, output.Functions_table_GO, params.is_upk)

rule Functions_table_UPK:
    input:
        UPK_obo = UPK_obo
    output:
        Functions_table_UPK = Functions_table_UPK
    params:
        is_upk = True
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.Functions_table_GO_or_UPK(r"{input.UPK_obo}", r"{output.Functions_table_UPK}", {params.is_upk})'"""
    run:
        cst.Functions_table_GO_or_UPK(input.UPK_obo, output.Functions_table_UPK, params.is_upk)

rule Protein_2_Function_table_RCTM__and__Functions_table_RCTM:
    input:
        RCTM_associations = RCTM_associations,
        RCTM_descriptions = RCTM_descriptions,
        RCTM_hierarchy = RCTM_hierarchy
    output:
        Protein_2_Function_table_RCTM = Protein_2_Function_table_RCTM,
        Functions_table_RCTM = Functions_table_RCTM
    threads: NUMBER_OF_PROCESSES_sorting
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.Protein_2_Function_table_RCTM__and__Function_table_RCTM(r"{input.RCTM_associations}", r"{input.RCTM_descriptions}", r"{input.RCTM_hierarchy}", r"{output.Protein_2_Function_table_RCTM}", r"{output.Functions_table_RCTM}", {threads})'"""
    run:
        cst.Protein_2_Function_table_RCTM__and__Function_table_RCTM(input.RCTM_associations, input.RCTM_descriptions, input.RCTM_hierarchy, output.Protein_2_Function_table_RCTM, output.Functions_table_RCTM, threads)

rule Functions_table_PMID_temp: # textmining pmc medline --> using gnu parallel
    input:
        pmc_medline = pmc_medline,
        parallel_parse_textmining_pmc_medline = parallel_parse_textmining_pmc_medline
    output:
        Functions_table_PMID_temp = Functions_table_PMID_temp,
        temp_dir = temp_dir
    threads: NUMBER_OF_PROCESSES
    shell:
        """python -c 'import parallel_parse; parallel_parse.parallel_script(r"{input.pmc_medline}", r"{input.parallel_parse_textmining_pmc_medline}", r"{output.Functions_table_PMID_temp}", temp_dir=r"{output.temp_dir}", cpu_number={threads})'"""

rule Functions_table_STRING_all:
    input:
        fn_list_str = [Functions_table_InterPro,
                       Functions_table_KEGG,
                       Functions_table_SMART,
                       Functions_table_PFAM,
                       Functions_table_GO,
                       Functions_table_UPK,
                       Functions_table_PMID,
                       Functions_table_RCTM]
    output:
        Functions_table_STRING_all = Functions_table_STRING_all,
        Functions_tables_STRING_temp = Functions_tables_STRING_temp
    threads: NUMBER_OF_PROCESSES_sorting
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.concatenate_Functions_tables(r"{input.fn_list_str}", r"{output.Functions_tables_STRING_temp}", r"{output.Functions_table_STRING_all}", {threads})'"""
    run:
        cst.concatenate_Functions_tables(input.fn_list_str, output.Functions_tables_STRING_temp, output.Functions_table_STRING_all, threads)


rule Taxid_2_Proteins_table_STRING:
    input:
        Protein_shorthands = Protein_shorthands
    output:
        Taxid_2_Proteins_table_STRING = Taxid_2_Proteins_table_STRING
    threads: NUMBER_OF_PROCESSES_sorting
    params:
        verbose = verbose
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.TaxID_2_Proteins_table(r"{input.Protein_shorthands}", r"{output.Taxid_2_Proteins_table_STRING}", {threads}, {params.verbose})'"""
    run:
        cst.Taxid_2_Proteins_table(input.Protein_shorthands, output.Taxid_2_Proteins_table_STRING, threads, params.verbose)

rule Protein_2_Function_table_KEGG:
    input:
        KEGG_benchmarking = KEGG_benchmarking
    output:
        Protein_2_Function_table_KEGG = Protein_2_Function_table_KEGG,
        KEGG_Taxid_2_acronym_table = KEGG_Taxid_2_acronym_table
    threads: NUMBER_OF_PROCESSES_sorting
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.Protein_2_Function_table_KEGG(r"{input.KEGG_benchmarking}", r"{output.Protein_2_Function_table_KEGG}", r"{output.KEGG_TaxID_2_acronym_table}", {threads})'"""
    run:
        cst.Protein_2_Function_table_KEGG(input.KEGG_benchmarking, output.Protein_2_Function_table_KEGG, output.KEGG_Taxid_2_acronym_table, threads)

rule Protein_2_Function_table_SMART__and__PFAM_helper:
    input:
        protein_domain_annotations = protein_domain_annotations
    output:
        Protein_2_Function_table_SMART_temp = Protein_2_Function_table_SMART_temp,
        Protein_2_Function_table_PFAM_temp = Protein_2_Function_table_PFAM_temp
    threads: NUMBER_OF_PROCESSES_sorting
    params:
        verbose = verbose
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.Protein_2_Function_table_SMART_and_PFAM_temp(r"{input.protein_domain_annotations}", r"{output.Protein_2_Function_table_SMART_temp}", r"{output.Protein_2_Function_table_PFAM_temp}", {threads}, {params.verbose})'"""
    run:
        cst.Protein_2_Function_table_SMART_and_PFAM_temp(input.protein_domain_annotations, output.Protein_2_Function_table_SMART_temp, output.Protein_2_Function_table_PFAM_temp, threads, params.verbose)

rule Protein_2_Function_table_SMART:
    input:
        Protein_2_Function_table_SMART_temp = Protein_2_Function_table_SMART_temp,
        map_name_2_an_SMART = map_name_2_an_SMART
    output:
        Protein_2_Function_table_SMART = Protein_2_Function_table_SMART,
        Functions_table_SMART_no_mapping = Functions_table_SMART_no_mapping
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.map_Name_2_AN(fn_in=r"{input.Protein_2_Function_table_SMART_temp}", fn_out=r"{output.Protein_2_Function_table_SMART}", fn_dict=r"{input.map_name_2_an_SMART}", fn_no_mapping=r"{output.Functions_table_SMART_no_mapping}")'"""
    run:
        cst.map_Name_2_AN(input.Protein_2_Function_table_SMART_temp, output.Protein_2_Function_table_SMART, input.map_name_2_an_SMART, output.Functions_table_SMART_no_mapping)

rule Protein_2_Function_table_PFAM:
    input:
        Protein_2_Function_table_PFAM_temp = Protein_2_Function_table_PFAM_temp,
        map_name_2_an_PFAM = map_name_2_an_PFAM
    output:
        Protein_2_Function_table_PFAM = Protein_2_Function_table_PFAM,
        Functions_table_PFAM_no_mapping = Functions_table_PFAM_no_mapping
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.map_Name_2_AN(fn_in=r"{input.Protein_2_Function_table_PFAM_temp}", fn_out=r"{output.Protein_2_Function_table_PFAM}", fn_dict=r"{input.map_name_2_an_PFAM}", fn_no_mapping=r"{output.Functions_table_PFAM_no_mapping}")'"""
    run:
        cst.map_Name_2_AN(input.Protein_2_Function_table_PFAM_temp, output.Protein_2_Function_table_PFAM, input.map_name_2_an_PFAM, output.Functions_table_PFAM_no_mapping)

rule Protein_2_Function_table_GO:
    input:
        GO_knowledge_Lars = GO_knowledge_Lars,
        GO_basic_obo = GO_basic_obo
    output:
        Protein_2_Function_table_GO = Protein_2_Function_table_GO
    threads: NUMBER_OF_PROCESSES_sorting
    params:
        verbose = verbose
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.Protein_2_Function_table_GO(fn_in_obo_file=r"{input.GO_basic_obo}", fn_in_knowledge=r"{input.GO_knowledge_Lars}", fn_out_Protein_2_Function_table_GO=r"{output.Protein_2_Function_table_GO}", number_of_processes={threads}, verbose={params.verbose})'"""
    run:
        cst.Protein_2_Function_table_GO(input.GO_basic_obo, input.GO_knowledge_Lars, output.Protein_2_Function_table_GO, threads, params.verbose)

rule Protein_2_Function_table_UPK:
    input:
        Functions_table_UPK = Functions_table_UPK,
        UPK_obo = UPK_obo,
        SwissProt_dump = SwissProt_dump,
        TrEMBL_dump = TrEMBL_dump,
        uniprot_2_string = uniprot_2_string
    output:
        Protein_2_Function_table_UPK = Protein_2_Function_table_UPK
    threads: NUMBER_OF_PROCESSES_sorting
    params:
        verbose = verbose
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.Protein_2_Function_table_UniProtKeyword(r"{input.Functions_table_UPK}", r"{input.UPK_obo}", r"{input.SwissProt_dump}", r"{input.TrEMBL_dump}", r"{input.uniprot_2_string}", r"{output.Protein_2_Function_table_UPK}", number_of_processes={threads}, verbose={params.verbose})'"""
    run:
        cst.Protein_2_Function_table_UniProtKeyword(input.Functions_table_UPK, input.UPK_obo, input.SwissProt_dump, input.TrEMBL_dump, input.uniprot_2_string, output.Protein_2_Function_table_UPK, threads, params.verbose)

rule Protein_2_Function_table_PMID__and__reduce_Functions_table_PMID:
    input:
        all_entities = all_entities,
        string_matches = string_matches,
        Taxid_2_Proteins_table_STRING = Taxid_2_Proteins_table_STRING,
        Functions_table_PMID_temp = Functions_table_PMID_temp
    output:
        Functions_table_PMID = Functions_table_PMID,
        Protein_2_Function_table_PMID = Protein_2_Function_table_PMID
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.Protein_2_Function_table_PMID__and__reduce_Functions_table_PMID(r"{input.all_entities}", r"{input.string_matches}", r"{input.Taxid_2_Proteins_table_STRING}", r"{input.Functions_table_PMID_temp}", r"{output.Functions_table_PMID}", r"{output.Protein_2_Function_table_PMID}")'"""
    run:
        cst.Protein_2_Function_table_PMID__and__reduce_Functions_table_PMID(input.all_entities, input.string_matches, input.Taxid_2_Proteins_table_STRING, input.Functions_table_PMID_temp, output.Functions_table_PMID, output.Protein_2_Function_table_PMID)

rule Protein_2_Function_table_STRING:
    input:
        Taxid_2_Proteins_table_STRING = Taxid_2_Proteins_table_STRING,
        fn_list_str = [Protein_2_Function_table_InterPro,
                       Protein_2_Function_table_KEGG,
                       Protein_2_Function_table_SMART,
                       Protein_2_Function_table_PFAM,
                       Protein_2_Function_table_GO,
                       Protein_2_Function_table_UPK,
                       Protein_2_Function_table_PMID,
                       Protein_2_Function_table_RCTM]
    output:
        Protein_2_Function_table_STRING = Protein_2_Function_table_STRING
    threads: NUMBER_OF_PROCESSES_sorting
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.Protein_2_Function_table_STRING(r"{input.fn_list_str}", r"{input.Taxid_2_Proteins_table_STRING}", r"{output.Protein_2_Function_table_STRING}", {threads})'"""
    run:
        cst.Protein_2_Function_table_STRING(input.fn_list_str, input.Taxid_2_Proteins_table_STRING, output.Protein_2_Function_table_STRING, threads)

rule Function_2_ENSP_table:
    input:
        Protein_2_Function_table_STRING = Protein_2_Function_table_STRING,
        Taxid_2_Proteins_table_STRING = Taxid_2_Proteins_table_STRING,
        Functions_table_STRING_all = Functions_table_STRING_all,
    output:
        Function_2_ENSP_table_STRING = Function_2_ENSP_table_STRING,
        Function_2_ENSP_table_STRING_reduced = Function_2_ENSP_table_STRING_reduced,
        Function_2_ENSP_table_STRING_removed = Function_2_ENSP_table_STRING_removed
    params:
        min_count = min_count,
        verbose = verbose
    run:
        cst.Function_2_ENSP_table(input.Protein_2_Function_table_STRING, input.Taxid_2_Proteins_table_STRING, input.Functions_table_STRING_all, output.Function_2_ENSP_table_STRING, output.Function_2_ENSP_table_STRING_reduced, output.Function_2_ENSP_table_STRING_removed, min_count=params.min_count, verbose=params.verbose)

rule Functions_table_STRING_reduced:
    input:
        Functions_table_STRING_all = Functions_table_STRING_all,
        Function_2_ENSP_table_STRING_reduced = Function_2_ENSP_table_STRING_reduced
    output:
        Functions_table_STRING_removed = Functions_table_STRING_removed,
        Functions_table_STRING_reduced = Functions_table_STRING_reduced
    run:
        cst.Functions_table_STRING_reduced(input.Functions_table_STRING_all, input.Function_2_ENSP_table_STRING_reduced, output.Functions_table_STRING_removed, output.Functions_table_STRING_reduced)

rule Protein_2_Function_table_reduced:
    input:
        Protein_2_Function_table_STRING = Protein_2_Function_table_STRING,
        Function_2_ENSP_table_STRING_removed = Function_2_ENSP_table_STRING_removed,
        Functions_table_STRING_reduced = Functions_table_STRING_reduced
    output:
        Protein_2_Function_table_STRING_reduced = Protein_2_Function_table_STRING_reduced,
        Protein_2_Function_table_STRING_removed = Protein_2_Function_table_STRING_removed
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.reduce_Protein_2_Function_table(r"{input.Protein_2_Function_table_STRING}", r"{input.Function_2_ENSP_table_STRING_removed}", r"{input.Functions_table_STRING_reduced}", r"{output.Protein_2_Function_table_STRING_reduced}", r"{output.Protein_2_Function_table_STRING_removed}")'"""
    # !!! MEMORY ISSUES WHEN USING RUN
    # run: # _and_Lineage_table_no_translation input.Lineage_table_no_translation,
    #     cst.reduce_Protein_2_Function_table(input.Protein_2_Function_table_STRING, input.Function_2_ENSP_table_STRING_removed, input.Functions_table_STRING_removed, output.Protein_2_Function_table_STRING_reduced, output.Protein_2_Function_table_STRING_removed)
    run:
        cst.reduce_Protein_2_Function_table(input.Protein_2_Function_table_STRING, input.Function_2_ENSP_table_STRING_removed, input.Functions_table_STRING_reduced, output.Protein_2_Function_table_STRING_reduced, output.Protein_2_Function_table_STRING_removed)

rule Protein_2_FunctionEnum_table_STRING:
    input:
        Protein_2_Function_table_STRING_reduced = Protein_2_Function_table_STRING_reduced,
        Functions_table_STRING_reduced = Functions_table_STRING_reduced
    output:
        Protein_2_FunctionEnum_table_STRING = Protein_2_FunctionEnum_table_STRING
    threads: NUMBER_OF_PROCESSES_sorting
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.Protein_2_FunctionEnum_table_STRING(r"{input.Functions_table_STRING_reduced}", r"{input.Protein_2_Function_table_STRING_reduced}", r"{output.Protein_2_FunctionEnum_table_STRING}")'"""
    run:
        cst.Protein_2_FunctionEnum_table_STRING(input.Functions_table_STRING_reduced, input.Protein_2_Function_table_STRING_reduced, output.Protein_2_FunctionEnum_table_STRING, threads)

rule Lineage_table_STRING:
    input:
        GO_basic_obo = GO_basic_obo,
        UPK_obo = UPK_obo,
        RCTM_hierarchy = RCTM_hierarchy,
        interpro_parent_2_child_tree = interpro_parent_2_child_tree,
        Functions_table_STRING_reduced = Functions_table_STRING_reduced
    output:
        Lineage_table = Lineage_table,
        Lineage_table_no_translation = Lineage_table_no_translation
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.create_Lineage_table_STRING(r"{input.GO_basic_obo}", r"{input.UPK_obo}", r"{input.RCTM_hierarchy}", r"{input.Functions_table_STRING_reduced}", r"{output.Lineage_table}", r"{output.Lineage_table_no_translation}")'"""
    run:
        cst.Lineage_table_STRING(input.GO_basic_obo, input.UPK_obo, input.RCTM_hierarchy, input.interpro_parent_2_child_tree, input.Functions_table_STRING_reduced, output.Lineage_table, output.Lineage_table_no_translation)

rule Taxid_2_FunctionCountArray_table_STRING:
    input:
        Protein_2_FunctionEnum_table_STRING = Protein_2_FunctionEnum_table_STRING,
        Functions_table_STRING_reduced = Functions_table_STRING_reduced,
        Taxid_2_Proteins_table_STRING = Taxid_2_Proteins_table_STRING
    output:
        Taxid_2_FunctionCountArray_table_STRING = Taxid_2_FunctionCountArray_table_STRING
    threads: NUMBER_OF_PROCESSES_sorting
    params:
        verbose = verbose
    # shell:
    #     """python -c 'import create_SQL_tables_snakemake; create_SQL_tables_snakemake.create_Taxid_2_FunctionCountArray_table_STRING(r"{input.Protein_2_FunctionEnum_table_STRING}", r"{input.Functions_table_STRING_reduced}", r"{input.Taxid_2_Proteins_table_STRING}", r"{output.Taxid_2_FunctionCountArray_table_STRING}", {threads})'"""
    run:
        cst.Taxid_2_FunctionCountArray_table_STRING(input.Protein_2_FunctionEnum_table_STRING, input.Functions_table_STRING_reduced, input.Taxid_2_Proteins_table_STRING, output.Taxid_2_FunctionCountArray_table_STRING, threads)

rule AFC_KS_enrichment_terms_flat_files:
    input:
        Protein_shorthands = Protein_shorthands,
        Functions_table_STRING_reduced = Functions_table_STRING_reduced,
        Function_2_ENSP_table_STRING_reduced = Function_2_ENSP_table_STRING_reduced,
        KEGG_Taxid_2_acronym_table = KEGG_Taxid_2_acronym_table,
        GO_basic_obo = GO_basic_obo,
        UPK_obo = UPK_obo,
        RCTM_hierarchy = RCTM_hierarchy,
        interpro_parent_2_child_tree = interpro_parent_2_child_tree
    output:
        AFC_KS_DIR = AFC_KS_DIR
    params:
        verbose = verbose
    run:
        cst.AFC_KS_enrichment_terms_flat_files(input.Protein_shorthands, input.Functions_table_STRING_reduced, input.Function_2_ENSP_table_STRING_reduced, input.KEGG_Taxid_2_acronym_table, input.GO_basic_obo, input.UPK_obo, input.RCTM_hierarchy, input.interpro_parent_2_child_tree, output.AFC_KS_DIR, params.verbose)


# snakemake -nF -j 24 Taxid_2_FunctionCountArray_table_STRING Lineage_table_STRING AFC_KS_enrichment_terms_flat_files

[uwsgi]
PythonHome = /mnt/mnemo5/dblyon/install/anaconda3/envs/agotool/bin/uwsgi
wsgi-file = runserver.py
callable = app
http = 127.0.0.1:10110 # incoming connections
stats = 127.0.0.1:9191 #
max-requests = 1000 # reload workers after the specified amount of managed requests
max-requests-delta = 2000 # add (worker_id * delta) to the max_requests value of each worker
min-worker-lifetime = 1800 # (1800 --> 30min). number of seconds worker must run before being reloaded (default is 60)
max-worker-lifetime = 604800 # (604800 --> 24*7*60*60, once per week). reload workers after the specified amount of seconds (default is disabled)
lazy-apps = true # loads your application one time per worker. thereby forcking is disabled.
touch-chain-reload = true # This is the first approach that improves user experience. When triggered, it will restart one worker at time, and the following worker is not reloaded until the previous one is ready to accept new requests.
### This configuration will tell uWSGI to run up to 10 workers under load. If the app is idle uWSGI will stop workers but it will always leave at least 2 of them running.
# set cheaper algorithm to use, if not set default will be used
cheaper-algo = spare
# minimum number of workers to keep at all times
cheaper = 2
# number of workers to spawn at startup
cheaper-initial = 2
# maximum number of workers that can be spawned
workers = 4
# how many workers should be spawned at a time
cheaper-step = 1
# Worker should finish until timeout is reached
worker-reload-mercy = 60 # seconds (default 60).
cheaper_overload = 60 # If all workers are busy for cheaper_overload seconds then uWSGI will spawn new workers. When the load is gone it will begin stopping processes one at a time.
# soft limit will prevent cheaper from spawning new workers
# if workers total rss memory is equal or higher
# we use 128MB soft limit below (values are in bytes)
#cheaper-rss-limit-soft = 30000000000 # (~30 GB, default is 134217728 128 MB) should allow for 4 workers to run synchronously.
#cheaper-rss-limit-hard = 35000000000
#req-logger = file:log_uwsgi_requests.txt
#logger = file:log_uwsgi_error.txt
### deploying flask example
# uwsgi --socket 127.0.0.1:3031 --wsgi-file myflaskapp.py --callable app --processes 4 --threads 2 --stats 127.0.0.1:9191
# The stats subsystem allows you to export uWSGI’s internal statistics as JSON. Make some request to your app and then telnet
# to the port 9191, you’ll get lots of fun information. You may want to use “uwsgitop”
# uwsgi --socket 127.0.0.1:10110/api --wsgi-file runserver.py --callable app --processes 2 --stats 127.0.0.1:9191
# uwsgi ./python/uwsgi_config.ini
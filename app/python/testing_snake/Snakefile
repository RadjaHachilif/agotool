import os, sys
sys.path.insert(0, os.path.dirname(os.getcwd()))
import sys, os
sys.path.insert(0, os.path.dirname(os.path.abspath(os.path.realpath(__file__))))


import variables
import create_SQL_tables_snakemake as cst
import download_resources_snakemake as drs
import tools
from importlib import reload
reload(cst)
reload(drs)
reload(tools)
import socket
hostname = socket.gethostname()
DOWNLOADS_DIR = variables.DOWNLOADS_DIR_SNAKEMAKE
TABLES_DIR = variables.TABLES_DIR_SNAKEMAKE
PYTHON_DIR = variables.PYTHON_DIR
verbose = variables.VERBOSE
TABLES_DICT_SNAKEMAKE = variables.TABLES_DICT_SNAKEMAKE

NUMBER_OF_PROCESSES_sorting = 4
log_snakemake = "log_snakemake.txt"
Functions_table_A = "Functions_table_A.txt"
Functions_table_B = "Functions_table_B.txt"
Functions_table_C = "Functions_table_C.txt"
Functions_table_DOID_BTO_GOCC = "Functions_table_DOID_BTO_GOCC.txt"
Functions_table_all = "Functions_table_all.txt"

Protein_2_Function_table_UPS = "Protein_2_Function_table_UPS.txt"
Taxid_2_Proteins_table_UPS_FIN = "Taxid_2_Proteins_table_UPS_FIN.txt"
Function_2_Protein_table_UPS = "Function_2_Protein_table_UPS.txt"
Function_2_Protein_table_UPS_reduced = "Function_2_Protein_table_UPS_reduced.txt"
Function_2_Protein_table_UPS_removed = "Function_2_Protein_table_UPS_removed.txt"
Protein_2_Function_table_C = "Protein_2_Function_table_C.txt"

rule r_Functions_table_all:
    input:
        fn_list_str = [Functions_table_A,
                       Functions_table_B,
                       Functions_table_C,
                       Functions_table_DOID_BTO_GOCC]
    output:
        Functions_table_all = Functions_table_all,
    threads: NUMBER_OF_PROCESSES_sorting
    log: log_snakemake
    run:
        cst.concatenate_Functions_tables(input.fn_list_str, output.Functions_table_all, threads)

rule r_Function_2_Protein_table_UPS:
    input:
        Protein_2_Function_table_UPS = Protein_2_Function_table_UPS,
        Taxid_2_Proteins_table_UPS_FIN = Taxid_2_Proteins_table_UPS_FIN, # for background_counts, but not to restrict by reference proteome
        Functions_table_all = Functions_table_all
    output:
        Function_2_Protein_table_UPS = Function_2_Protein_table_UPS,
        Function_2_Protein_table_UPS_reduced = Function_2_Protein_table_UPS_reduced, # reduced by min_count per taxid, for background proteomes?
        Function_2_Protein_table_UPS_removed = Function_2_Protein_table_UPS_removed
    threads: NUMBER_OF_PROCESSES_sorting
    log: log_snakemake
    run:
        cst.Function_2_Protein_table_UPS(input.Protein_2_Function_table_UPS, input.Taxid_2_Proteins_table_UPS_FIN, input.Functions_table_all, output.Function_2_Protein_table_UPS, output.Function_2_Protein_table_UPS_reduced, output.Function_2_Protein_table_UPS_removed, threads)

rule r_Functions_table_UPS_FIN:
    input:
        Functions_table_all = Functions_table_all, # superset
        Function_2_Protein_table_UPS_reduced = Function_2_Protein_table_UPS_reduced, # include all prefiltered functions
    output:
        Functions_table_UPS_FIN = Functions_table_UPS_FIN,
        Functions_table_UPS_removed = Functions_table_UPS_removed # removed if description, hierarchy, etc. but not associated with more than 1 protein per function per taxid (in any taxid)
    log: log_snakemake
    run:
        cst.Functions_table_UPS_FIN(input.Functions_table_all, input.Function_2_Protein_table_UPS_reduced, output.Functions_table_UPS_FIN, output.Functions_table_UPS_removed)

rule r_Pickle_lookup_arrays_UPS_FIN:
    input:
        Functions_table_UPS_FIN = Functions_table_UPS_FIN
    output:
        year_arr_UPS_FIN = year_arr_UPS_FIN,
        hierlevel_arr_UPS_FIN = hierlevel_arr_UPS_FIN,
        entitytype_arr_UPS_FIN = entitytype_arr_UPS_FIN,
        functionalterm_arr_UPS_FIN = functionalterm_arr_UPS_FIN,
        indices_arr_UPS_FIN = indices_arr_UPS_FIN,
        description_arr_UPS_FIN = description_arr_UPS_FIN,
        category_arr_UPS_FIN = category_arr_UPS_FIN
    log: log_snakemake
    run:
        cst.Pickle_lookup_arrays_UPS_FIN(input.Functions_table_UPS_FIN, output.year_arr_UPS_FIN, output.hierlevel_arr_UPS_FIN, output.entitytype_arr_UPS_FIN, output.functionalterm_arr_UPS_FIN, output.indices_arr_UPS_FIN, output.description_arr_UPS_FIN, output.category_arr_UPS_FIN)

rule r_Taxid_2_FunctionCountArray_table_UPS_FIN: # restricted to UniProtIDs of reference proteome
    input:
        Protein_2_FunctionEnum_table_UPS_FIN = Protein_2_FunctionEnum_table_UPS_FIN,
        Functions_table_UPS_FIN = Functions_table_UPS_FIN,
        Taxid_2_Proteins_table_UPS_FIN = Taxid_2_Proteins_table_UPS_FIN
    output:
        Taxid_2_FunctionCountArray_table_UPS_FIN = Taxid_2_FunctionCountArray_table_UPS_FIN,
        Protein_2_FunctionEnum_table_UPS_for_Taxid_count = Protein_2_FunctionEnum_table_UPS_for_Taxid_count # not deprecated but not "UPS_FIN"
    threads: NUMBER_OF_PROCESSES_sorting
    params:
        verbose = verbose
    log: log_snakemake
    run:
        cst.Taxid_2_FunctionCountArray_table_UPS(input.Protein_2_FunctionEnum_table_UPS_FIN, input.Functions_table_UPS_FIN, input.Taxid_2_Proteins_table_UPS_FIN, output.Taxid_2_FunctionCountArray_table_UPS_FIN, output.Protein_2_FunctionEnum_table_UPS_for_Taxid_count, threads, params.verbose)
stages:
  - build_monthly
  - test
  - deploy

variables:
  PYTHON: "/home/gitlab-runner/anaconda3/envs/snake/bin/python"
  SNAKEMAKE: "/home/gitlab-runner/anaconda3/envs/snake/bin/snakemake"

before_script:
    - export DATE=$(date +"%Y_%m_%d_%I_%M_%p")
    - export TAR_FILE_NAME="bak_aGOtool_flatfiles_$DATE.tar"

initial_testing:
  stage: test
  tags:
    - aquarius
  script:
    - echo "$(date)"
    - $PYTHON -V
    - $SNAKEMAKE --version
    - echo "$USER"
    - echo $HOSTNAME
    - echo $DATE
    - echo $TAR_FILE_NAME
    # - echo "bak_aGOtool_flatfiles_$DATE.tar"
    - cd /home/dblyon/agotool/data/PostgreSQL/tables
    - echo pwd
    ### tar and compress previous files for backup
    - cd /home/dblyon/agotool/data/PostgreSQL/tables
    - echo pwd
    - find . -maxdepth 1 -name '*.npy' -o -name '*_UPS_FIN*' | xargs tar cvf $TAR_FILE_NAME
    ### compress for quick transfer and backup, this can run in the background since it's independent of snakemake
    - pbzip2 -p8 $TAR_FILE_NAME &

job:on-schedule:
  only:
    - schedules
  stage: build_monthly
  tags:
    - aquarius
  script:
    - echo "$(date)"
    ### tar and compress previous files for backup
    - cd /home/dblyon/agotool/data/PostgreSQL/tables
    - echo pwd
    - find . -maxdepth 1 -name '*.npy' -o -name '*_UPS_FIN*' | xargs tar cvf $TAR_FILE_NAME
    ### compress for quick transfer and backup, this can run in the background since it's independent of snakemake
    - pbzip2 -p8 $TAR_FILE_NAME &

# ### run snakemake pipeline
# echo "\n### run snakemake pipeline\n"
# cd /mnt/mnemo5/dblyon/agotool/app/python
# /mnt/mnemo5/dblyon/install/anaconda3/envs/snake/bin/snakemake -l | tr '\n' ' ' | xargs /mnt/mnemo5/dblyon/install/anaconda3/envs/snake/bin/snakemake -j 10 -F
# check_exit_status
  
